/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Array_Test,
  Array_TestInterface,
} from "../../../contracts/misc/Array_Test";

const _abi = [
  {
    inputs: [],
    name: "testArr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "viewArr",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526040518060a00160405280600161ffff168152602001601461ffff168152602001601e61ffff16815260200161020161ffff16815260200161078361ffff16815250600090600561005692919061006f565b5061020160015534801561006957600080fd5b506100df565b8280548282559060005260206000209081019282156100b1579160200282015b828111156100b0578251829061ffff1690559160200191906001019061008f565b5b5090506100be91906100c2565b5090565b5b808211156100db5760008160009055506001016100c3565b5090565b610305806100ee6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806380cc26381461003b578063f3790c5714610059575b600080fd5b610043610063565b604051610050919061026e565b60405180910390f35b6100616100f7565b005b606061007967eb3d436cf27fb74b60c01b6101a3565b61008d67fe539a3a57dabc8f60c01b6101a3565b6100a1677e8db39ce0e61f6860c01b6101a3565b60008054806020026020016040519081016040528092919081815260200182805480156100ed57602002820191906000526020600020905b8154815260200190600101908083116100d9575b5050505050905090565b61010b6772b8fedff3bc5e6a60c01b6101a3565b61011f67400de9e7f5ad0da260c01b6101a3565b61013367b6dd009d944f4d8660c01b6101a3565b600073__$7f37c9a29f30c6653170c3248a61374303$__6317dc59fa90916001546040518363ffffffff1660e01b81526004016101719291906102a6565b60006040518083038186803b15801561018957600080fd5b505af415801561019d573d6000803e3d6000fd5b50505050565b50565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6101e5816101d2565b82525050565b60006101f783836101dc565b60208301905092915050565b6000602082019050919050565b600061021b826101a6565b61022581856101b1565b9350610230836101c2565b8060005b8381101561026157815161024888826101eb565b975061025383610203565b925050600181019050610234565b5085935050505092915050565b600060208201905081810360008301526102888184610210565b905092915050565b8082525050565b6102a0816101d2565b82525050565b60006040820190506102bb6000830185610290565b6102c86020830184610297565b939250505056fea26469706673582212206fedd46ecc9d4c445be8e9b6e6ad3e1981bb444e6c52a0a1e8810b186e6f80f264736f6c634300080b0033";

type Array_TestConstructorParams =
  | [linkLibraryAddresses: Array_TestLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Array_TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Array_Test__factory extends ContractFactory {
  constructor(...args: Array_TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        Array_Test__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: Array_TestLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$7f37c9a29f30c6653170c3248a61374303\\$__", "g"),
      linkLibraryAddresses["contracts/libs/Array.sol:Array"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Array_Test> {
    return super.deploy(overrides || {}) as Promise<Array_Test>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Array_Test {
    return super.attach(address) as Array_Test;
  }
  override connect(signer: Signer): Array_Test__factory {
    return super.connect(signer) as Array_Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Array_TestInterface {
    return new utils.Interface(_abi) as Array_TestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Array_Test {
    return new Contract(address, _abi, signerOrProvider) as Array_Test;
  }
}

export interface Array_TestLibraryAddresses {
  ["contracts/libs/Array.sol:Array"]: string;
}
