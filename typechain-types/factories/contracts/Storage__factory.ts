/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Storage, StorageInterface } from "../../contracts/Storage";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "_id",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_staker",
        type: "address",
      },
    ],
    name: "Store",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "_id",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_unstaker",
        type: "address",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "getUser",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_id",
        type: "uint256[]",
      },
    ],
    name: "store",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_id",
        type: "uint256[]",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002b67a8f0db73fc52807660c01b61003060201b60201c565b610033565b50565b611399806100426000396000f3fe6080604052600436106100345760003560e01c8063429e674b146100395780638293744b14610055578063e77d35a31461007e575b600080fd5b610053600480360381019061004e9190610f46565b6100bd565b005b34801561006157600080fd5b5061007c60048036038101906100779190610f46565b610278565b005b34801561008a57600080fd5b506100a560048036038101906100a09190610fa2565b610433565b6040516100b4939291906110c2565b60405180910390f35b6100d167d78922d2ad53d41a60c01b6105d9565b6100e567c5e06035b30cbbb060c01b6105d9565b6100f967e6a40c05cc36f9af60c01b6105d9565b60018151146101ae576101166775ec4fd1817699a460c01b6105d9565b61012a67f8de5962955f6f9460c01b6105d9565b61013e673e4c29630aaa29a260c01b6105d9565b60005b81518110156101a85761015e67a7aeaab3bce5872b60c01b6105d9565b610172673469fe2ae413a36e60c01b6105d9565b6101978383838151811061018957610188611100565b5b6020026020010151336105dc565b806101a19061115e565b9050610141565b50610211565b6101c267dc0f4cb9eb3152a060c01b6105d9565b6101d66778a6b10ca20e75f060c01b6105d9565b6101ea67b03c807b4e4d25d360c01b6105d9565b610210828260008151811061020257610201611100565b5b6020026020010151336105dc565b5b610225679443b71d51cf578860c01b6105d9565b6102396725f1e46a8281a95b60c01b6105d9565b7fb1f4342da638c10de9fb8ddd511ae5d3019e7db9fe63f8b58b0e7b73f23b7a9082823360405161026c939291906111b6565b60405180910390a15050565b61028c675d4aafded5e6b4da60c01b6105d9565b6102a0678da1dd1251116ce660c01b6105d9565b6102b4678c9b7cfad184bca660c01b6105d9565b6001815114610369576102d16795010050afd9a50960c01b6105d9565b6102e567bf6142288d6365f660c01b6105d9565b6102f96746536245c568f0fb60c01b6105d9565b60005b815181101561036357610319675268267e211ce3cc60c01b6105d9565b61032d670fac7924afa1faa460c01b6105d9565b6103528383838151811061034457610343611100565b5b6020026020010151336108a1565b8061035c9061115e565b90506102fc565b506103cc565b61037d670b6f2bc7f5d358b560c01b6105d9565b610391678e21742bf9f8b28760c01b6105d9565b6103a567676e4cae60c6175660c01b6105d9565b6103cb82826000815181106103bd576103bc611100565b5b6020026020010151336108a1565b5b6103e0675214e04490648f3060c01b6105d9565b6103f4673a9477063482d4b460c01b6105d9565b7f2914fb8a46e50bef641e8ad5afbe361259bec877a37b20211e5fab6268f46da3828233604051610427939291906111b6565b60405180910390a15050565b606060008061044c67a64aca2b02b1cc3060c01b6105d9565b61046067ad434f185779e65e60c01b6105d9565b610474671c0ca7b52e2efb8e60c01b6105d9565b60008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506104ca6777211bd6c1d2a6d960c01b6105d9565b6104de679e322077b806a1b060c01b6105d9565b8060000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208160020160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020548260030154828054806020026020016040519081016040528092919081815260200182805480156105c257602002820191906000526020600020905b8154815260200190600101908083116105ae575b505050505092509350935093505093509350939050565b50565b6105f0676da565437f3e99cb60c01b6105d9565b61060467702ba6f799b0c11260c01b6105d9565b6106186722707d8e0fa07cd560c01b6105d9565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061066e67e0970740933c0e5160c01b6105d9565b61068267c8c0e20d7856718360c01b6105d9565b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd8330866040518463ffffffff1660e01b81526004016106bf939291906111f4565b600060405180830381600087803b1580156106d957600080fd5b505af11580156106ed573d6000803e3d6000fd5b5050505061070567e4a335536b14609860c01b6105d9565b600181600301600082825461071a919061122b565b9250508190555061073567e46439376927225a60c01b6105d9565b428160020160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020819055506107a067772303456853477960c01b6105d9565b6107b4678542bf283e1818e860c01b6105d9565b8060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190915055610830671fcaff1f4054c1c360c01b6105d9565b60018160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b6108b56778771bd469318a4260c01b6105d9565b6108c967530f746a5c95799260c01b6105d9565b6108dd673ce32c1673c73b9560c01b6105d9565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506109336792f1155e5c3f629060c01b6105d9565b6109466664cc212f9255e360c01b6105d9565b61095a6767590ac68d42ef4660c01b6105d9565b8060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff166109f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f090611304565b60405180910390fd5b610a0d67f798c2c7e67d4b5660c01b6105d9565b610a21673829c87ea9643a3c60c01b6105d9565b60008160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff021916908315150217905550610aa067baa3f910b7a59fc760c01b6105d9565b610ab467536d86857f56687860c01b6105d9565b8060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$7f37c9a29f30c6653170c3248a61374303$__6317dc59fa9091856040518363ffffffff1660e01b8152600401610b2f92919061133a565b60006040518083038186803b158015610b4757600080fd5b505af4158015610b5b573d6000803e3d6000fd5b50505050610b736712b31ce8f019581460c01b6105d9565b8060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009055610bdd675a18ac06b7bf760960c01b6105d9565b60008160030181905550610bfb67be1582ad8e21a46d60c01b6105d9565b610c0f677f9cead12b03c56f60c01b6105d9565b600081600301541415610c9357610c30674a6363b16693642b60c01b6105d9565b610c44675022c51302acfd4b60c01b6105d9565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060038201600090555050610ca8565b610ca76731024cd07215d47460c01b6105d9565b5b610cbc67c3db35ed0263b75b60c01b6105d9565b610cd067b009315a907f1e2460c01b6105d9565b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3084866040518463ffffffff1660e01b8152600401610d0d939291906111f4565b600060405180830381600087803b158015610d2757600080fd5b505af1158015610d3b573d6000803e3d6000fd5b5050505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d8482610d59565b9050919050565b610d9481610d79565b8114610d9f57600080fd5b50565b600081359050610db181610d8b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e0582610dbc565b810181811067ffffffffffffffff82111715610e2457610e23610dcd565b5b80604052505050565b6000610e37610d45565b9050610e438282610dfc565b919050565b600067ffffffffffffffff821115610e6357610e62610dcd565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b610e8c81610e79565b8114610e9757600080fd5b50565b600081359050610ea981610e83565b92915050565b6000610ec2610ebd84610e48565b610e2d565b90508083825260208201905060208402830185811115610ee557610ee4610e74565b5b835b81811015610f0e5780610efa8882610e9a565b845260208401935050602081019050610ee7565b5050509392505050565b600082601f830112610f2d57610f2c610db7565b5b8135610f3d848260208601610eaf565b91505092915050565b60008060408385031215610f5d57610f5c610d4f565b5b6000610f6b85828601610da2565b925050602083013567ffffffffffffffff811115610f8c57610f8b610d54565b5b610f9885828601610f18565b9150509250929050565b600080600060608486031215610fbb57610fba610d4f565b5b6000610fc986828701610da2565b9350506020610fda86828701610da2565b9250506040610feb86828701610e9a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61102a81610e79565b82525050565b600061103c8383611021565b60208301905092915050565b6000602082019050919050565b600061106082610ff5565b61106a8185611000565b935061107583611011565b8060005b838110156110a657815161108d8882611030565b975061109883611048565b925050600181019050611079565b5085935050505092915050565b6110bc81610e79565b82525050565b600060608201905081810360008301526110dc8186611055565b90506110eb60208301856110b3565b6110f860408301846110b3565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061116982610e79565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561119c5761119b61112f565b5b600182019050919050565b6111b081610d79565b82525050565b60006060820190506111cb60008301866111a7565b81810360208301526111dd8185611055565b90506111ec60408301846111a7565b949350505050565b600060608201905061120960008301866111a7565b61121660208301856111a7565b61122360408301846110b3565b949350505050565b600061123682610e79565b915061124183610e79565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112765761127561112f565b5b828201905092915050565b600082825260208201905092915050565b7f77697468647261772e5f77697468647261773a204552524f522c20557365722060008201527f646f65736e2774206f776e732074686520676976656e20746f6b656e00000000602082015250565b60006112ee603c83611281565b91506112f982611292565b604082019050919050565b6000602082019050818103600083015261131d816112e1565b9050919050565b8082525050565b61133481610e79565b82525050565b600060408201905061134f6000830185611324565b61135c602083018461132b565b939250505056fea2646970667358221220dd5dc76f49337429ed52241f2858f63cf08fd3a379e480fb8602dd8b1e1219c064736f6c634300080b0033";

type StorageConstructorParams =
  | [linkLibraryAddresses: StorageLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Storage__factory extends ContractFactory {
  constructor(...args: StorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Storage__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: StorageLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$7f37c9a29f30c6653170c3248a61374303\\$__", "g"),
      linkLibraryAddresses["contracts/libs/Array.sol:Array"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Storage> {
    return super.deploy(overrides || {}) as Promise<Storage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Storage {
    return super.attach(address) as Storage;
  }
  override connect(signer: Signer): Storage__factory {
    return super.connect(signer) as Storage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorageInterface {
    return new utils.Interface(_abi) as StorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Storage {
    return new Contract(address, _abi, signerOrProvider) as Storage;
  }
}

export interface StorageLibraryAddresses {
  ["contracts/libs/Array.sol:Array"]: string;
}
