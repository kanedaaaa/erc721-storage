/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Storage, StorageInterface } from "../../contracts/Storage";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "_id",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_staker",
        type: "address",
      },
    ],
    name: "Store",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "_id",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_unstaker",
        type: "address",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "getUser",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_id",
        type: "uint256[]",
      },
    ],
    name: "store",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_id",
        type: "uint256[]",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a76806100206000396000f3fe6080604052600436106100345760003560e01c8063429e674b146100395780638293744b14610055578063e77d35a31461007e575b600080fd5b610053600480360381019061004e9190610705565b6100bd565b005b34801561006157600080fd5b5061007c60048036038101906100779190610705565b610174565b005b34801561008a57600080fd5b506100a560048036038101906100a09190610761565b61022b565b6040516100b493929190610881565b60405180910390f35b600181511461010e5760005b8151811015610108576100f7838383815181106100e9576100e86108bf565b5b60200260200101513361036d565b806101019061091d565b90506100c9565b50610135565b6101348282600081518110610126576101256108bf565b5b60200260200101513361036d565b5b7fb1f4342da638c10de9fb8ddd511ae5d3019e7db9fe63f8b58b0e7b73f23b7a9082823360405161016893929190610975565b60405180910390a15050565b60018151146101c55760005b81518110156101bf576101ae838383815181106101a05761019f6108bf565b5b6020026020010151336104ff565b806101b89061091d565b9050610180565b506101ec565b6101eb82826000815181106101dd576101dc6108bf565b5b6020026020010151336104ff565b5b7f2914fb8a46e50bef641e8ad5afbe361259bec877a37b20211e5fab6268f46da382823360405161021f93929190610975565b60405180910390a15050565b606060008060008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208160010160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000205482600201548280548060200260200160405190810160405280929190818152602001828054801561035657602002820191906000526020600020905b815481526020019060010190808311610342575b505050505092509350935093505093509350939050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508373ffffffffffffffffffffffffffffffffffffffff166323b872dd8330866040518463ffffffff1660e01b81526004016103ec939291906109b3565b600060405180830381600087803b15801561040657600080fd5b505af115801561041a573d6000803e3d6000fd5b50505050600181600201600082825461043391906109ea565b92505081905550428160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020819055508060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083908060018154018082558091505060019003906000526020600020016000909190919091505550505050565b505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061054382610518565b9050919050565b61055381610538565b811461055e57600080fd5b50565b6000813590506105708161054a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105c48261057b565b810181811067ffffffffffffffff821117156105e3576105e261058c565b5b80604052505050565b60006105f6610504565b905061060282826105bb565b919050565b600067ffffffffffffffff8211156106225761062161058c565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61064b81610638565b811461065657600080fd5b50565b60008135905061066881610642565b92915050565b600061068161067c84610607565b6105ec565b905080838252602082019050602084028301858111156106a4576106a3610633565b5b835b818110156106cd57806106b98882610659565b8452602084019350506020810190506106a6565b5050509392505050565b600082601f8301126106ec576106eb610576565b5b81356106fc84826020860161066e565b91505092915050565b6000806040838503121561071c5761071b61050e565b5b600061072a85828601610561565b925050602083013567ffffffffffffffff81111561074b5761074a610513565b5b610757858286016106d7565b9150509250929050565b60008060006060848603121561077a5761077961050e565b5b600061078886828701610561565b935050602061079986828701610561565b92505060406107aa86828701610659565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6107e981610638565b82525050565b60006107fb83836107e0565b60208301905092915050565b6000602082019050919050565b600061081f826107b4565b61082981856107bf565b9350610834836107d0565b8060005b8381101561086557815161084c88826107ef565b975061085783610807565b925050600181019050610838565b5085935050505092915050565b61087b81610638565b82525050565b6000606082019050818103600083015261089b8186610814565b90506108aa6020830185610872565b6108b76040830184610872565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061092882610638565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561095b5761095a6108ee565b5b600182019050919050565b61096f81610538565b82525050565b600060608201905061098a6000830186610966565b818103602083015261099c8185610814565b90506109ab6040830184610966565b949350505050565b60006060820190506109c86000830186610966565b6109d56020830185610966565b6109e26040830184610872565b949350505050565b60006109f582610638565b9150610a0083610638565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a3557610a346108ee565b5b82820190509291505056fea2646970667358221220bfb873e90aa361c6e85322c1a89a564acba2cd5a3d9fba431dd0c9304de843f664736f6c634300080b0033";

type StorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Storage__factory extends ContractFactory {
  constructor(...args: StorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Storage> {
    return super.deploy(overrides || {}) as Promise<Storage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Storage {
    return super.attach(address) as Storage;
  }
  override connect(signer: Signer): Storage__factory {
    return super.connect(signer) as Storage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorageInterface {
    return new utils.Interface(_abi) as StorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Storage {
    return new Contract(address, _abi, signerOrProvider) as Storage;
  }
}
